name: Clojure CI

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

env:
  PORT: 8000
  LOGO: https://nilenso.com/images/nilenso_logos/nilenso_logo.png
  CHRONOGRAPH_JAR: chronograph.jar

jobs:
  server-build:
    services:
      postgres:
        image: postgres:12.3
        env:
          POSTGRES_DB: chronograph_ci
          POSTGRES_USER: chronograph_ci_user
          POSTGRES_PASSWORD: chronograph_ci_pwd
        ports:
          - 5432:5432

    runs-on: ubuntu-latest

    env:
      TEST_CONFIG_FILE: "config/config.ci.edn"

    steps:
    - uses: actions/checkout@v2

    - name: Cache lein deps
      uses: actions/cache@v2
      env:
        cache-name: cache-lein-deps
      with:
        path: ~/.m2
        key: ${{ env.cache-name }}-${{ hashFiles('**/project.clj') }}
        restore-keys: |
          ${{ env.cache-name }}-

    - name: Install dependencies
      run: lein deps

    - name: Run migrations
      run: lein run -- -mf $TEST_CONFIG_FILE

    - name: Run tests
      run: lein test

    - name: Build uberjar
      run: lein uberjar

    - name: Upload uberjar
      uses: actions/upload-artifact@v2
      with:
        name: chronograph-uberjar
        path: target/${{env.CHRONOGRAPH_JAR}}

  frontend-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install frontend deps
      run: yarn install

    - name: Run frontend tests
      run: yarn test

  staging-deploy:
    runs-on: ubuntu-latest

    needs: server-build

    env:
      CHRONOGRAPH_STAGING_INVENTORY: "staging.hosts"
      CHRONOGRAPH_STAGING_PRIVATE_KEY: "staging.private_key"
      CHRONOGRAPH_STAGING_USER: ${{secrets.CHRONOGRAPH_STAGING_USER}}
      ANSIBLE_HOST_KEY_CHECKING: False

    steps:
    - uses: actions/checkout@v2
      with:
        ref: debug
        repository: 'nilenso/chronograph-playbook'

    - name: Create private key
      run: |
        echo "$CHRONOGRAPH_STAGING_PRIVATE_KEY_DATA" > "$CHRONOGRAPH_STAGING_PRIVATE_KEY"
        chmod 600 "$CHRONOGRAPH_STAGING_PRIVATE_KEY"
      shell: bash
      env:
        CHRONOGRAPH_STAGING_PRIVATE_KEY_DATA: ${{secrets.CHRONOGRAPH_STAGING_PRIVATE_KEY_DATA}}

    - name: Create inventory
      run: |
        echo "$CHRONOGRAPH_STAGING_INVENTORY_DATA" > "$CHRONOGRAPH_STAGING_INVENTORY"
        chmod 600 "$CHRONOGRAPH_STAGING_INVENTORY"
      shell: bash
      env:
        CHRONOGRAPH_STAGING_INVENTORY_DATA: ${{secrets.CHRONOGRAPH_STAGING_INVENTORY_DATA}}

    - name: Download uberjar
      id: uberjar
      uses: actions/download-artifact@v2
      with:
        name: chronograph-uberjar

    - name: Set up group vars
      shell: bash
      env:
        WEBSERVERS_VARS: "group_vars/webservers"
      run: |
        mkdir group_vars
        echo "---" >> $WEBSERVERS_VARS
        echo "Setting chronograph_jar: ${{ steps.uberjar.outputs.download-path }}"
        echo "chronograph_jar: ${{ steps.uberjar.outputs.download-path }}/$CHRONOGRAPH_JAR" >> $WEBSERVERS_VARS
        echo "Printing groupvars"
        cat $WEBSERVERS_VARS
        echo "End groupvars"

    - name: Deploy to staging
      run: |
        ansible-playbook \
        --inventory "$CHRONOGRAPH_STAGING_INVENTORY" \
        --user "$CHRONOGRAPH_STAGING_USER" \
        --private-key "$CHRONOGRAPH_STAGING_PRIVATE_KEY" \
        --become \
        -vvvv \
        webserver.yml
